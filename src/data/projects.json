[
  {
    "id": 1,
    "name": "A-Z",
    "categ": "Mobile Game | Android",
    "descr": "The first serious project. A small text puzzle game based on the alphabet. Written on Kotlin. The Volley library was used to make HTTP requests to the web leaderboard.",
    "img": "./img/projects/a-z.png",
    "tags": ["ANDROID", "KOTLIN", "VOLLEY"],
    "links": [
      {
        "icon": "googlePlay",
        "src": "https://play.google.com/store/apps/details?id=com.hartaithan.a_z"
      },
      {
        "icon": "link",
        "src": "https://hartaithan.github.io/a-z/"
      }
    ]
  },
  {
    "id": 2,
    "name": "Camo Tracker",
    "categ": "Web App | React | Express",
    "descr": "Camo Tracker for Call of Duty Black Ops Cold War. Built with MERN stack. Authentication is made using JWT tokens. User progress is managed by Redux and stored in MongoDB. Design is adapted for desktop and mobile devices. Hosted on Vercel",
    "img": "./img/projects/camo-tracker.png",
    "tags": [
      "NODE.JS",
      "EXPRESS.JS",
      "MONGODB",
      "REACT",
      "ROUTER DOM",
      "REDUX",
      "VERCEL"
    ],
    "links": [
      {
        "icon": "github",
        "src": "https://github.com/Hartaithan/camo-tracker-v2"
      },
      {
        "icon": "link",
        "src": "https://camo-tracker-hartaithan.vercel.app/"
      }
    ]
  },
  {
    "id": 3,
    "name": "Rick and Morty Characters Wiki",
    "categ": "Web App | React",
    "descr": "A test project for typescript practice. The user can view information about a character, search by character name, type, species, and filter by status and gender. Hosted on Vercel",
    "img": "./img/projects/rickandmorty.png",
    "tags": ["REACT", "AXIOS", "TYPESCRIPT", "BOOTSTRAP", "VERCEL", "MOBX"],
    "links": [
      {
        "icon": "github",
        "src": "https://github.com/Hartaithan/rick-and-morty-api"
      },
      {
        "icon": "link",
        "src": "https://rick-and-morty-five-ebon.vercel.app/"
      }
    ]
  },
  {
    "id": 4,
    "name": "Image Editor",
    "categ": "Web App | Vue",
    "descr": "The web analog of the Snipping Tool app. The user can upload an image, mark some important detail on the image and save the edited image. Import and export works both from a file and from the clipboard.",
    "img": "./img/projects/image-editor.png",
    "tags": ["VUE", "VUEX", "TYPESCRIPT", "HTML5 CANVAS", "VERCEL"],
    "links": [
      {
        "icon": "github",
        "src": "https://github.com/Hartaithan/image-editor"
      },
      {
        "icon": "link",
        "src": "https://image-editor-hartaithan.vercel.app/"
      }
    ]
  },
  {
    "id": 5,
    "name": "Next Posts",
    "categ": "Web App | Next.JS",
    "descr": "A simple news website. Authorized users can create posts, rate them and leave comments. Authorization is done with Magic Link. The posts are stored in Supabase. The UI is built on Mantine.",
    "img": "./img/projects/next-posts.png",
    "tags": [
      "NEXT.JS",
      "SSR",
      "TYPESCRIPT",
      "MANTINE",
      "SUPABASE",
      "CLOUDINARY",
      "MAGIC LINK"
    ],
    "links": [
      {
        "icon": "github",
        "src": "https://github.com/Hartaithan/next-posts"
      },
      {
        "icon": "link",
        "src": "https://next-posts-hartaithan.vercel.app/"
      }
    ]
  },
  {
    "id": 6,
    "name": "Image Aware Background",
    "categ": "Web App | Vue",
    "descr": "An application that identifies one dominant and 5 most used colors from a given image. The search for colors is implemented using the Canvas API.",
    "img": "./img/projects/image-aware-background.png",
    "tags": ["VUE", "VITE", "TYPESCRIPT", "HTML5 CANVAS", "VERCEL"],
    "links": [
      {
        "icon": "github",
        "src": "https://github.com/Hartaithan/image-aware-background"
      },
      {
        "icon": "link",
        "src": "https://image-aware-background.vercel.app/"
      }
    ]
  },
  {
    "id": 7,
    "name": "Trophy List Fetcher",
    "categ": "Web App | Next.JS",
    "descr": "Trophy List Fetching Tool. The application is able to fetch trophy lists from psnprofiles by parsing and directly from PSN API by authorization. The application was created to automate the import of trophy lists.",
    "img": "./img/projects/trophy-list-fetcher.png",
    "tags": ["NEXT.JS", "SSR", "TYPESCRIPT", "PSN", "COOKIES", "CHEERIO"],
    "links": [
      {
        "icon": "github",
        "src": "https://github.com/Hartaithan/trophy-list-fetcher"
      },
      {
        "icon": "link",
        "src": "https://trophy-list-fetcher.vercel.app/"
      }
    ]
  },
  {
    "id": 8,
    "name": "Dimension C-137",
    "categ": "Web App | Angular",
    "descr": "A project for practicing in Angular. Apollo Client (GraphQL) is used for data fetching. The application has two views - Table and Cards. Infinite Scroll is implemented in each view.",
    "img": "./img/projects/dimension-c137.png",
    "tags": [
      "ANGULAR",
      "TYPESCRIPT",
      "APOLLO CLIENT",
      "INFINITE SCROLL",
      "NGRX",
      "MATERIAL TABLE"
    ],
    "links": [
      {
        "icon": "github",
        "src": "https://github.com/Hartaithan/dimension-c137"
      },
      {
        "icon": "link",
        "src": "https://dimension-c137.vercel.app/"
      }
    ]
  },
  {
    "id": 9,
    "name": "Ramutable",
    "categ": "Web App | Nuxt",
    "descr": "A project for practicing in Nuxt. The application uses an SSR approach to render pages. Pagination is controlled by query params. UI built with Tailwind",
    "img": "./img/projects/ramutable.png",
    "tags": ["VUE", "NUXT", "TYPESCRIPT", "TAILWIND", "SSR"],
    "links": [
      {
        "icon": "github",
        "src": "https://github.com/Hartaithan/ramutable"
      },
      {
        "icon": "link",
        "src": "https://ramutable.vercel.app/"
      }
    ]
  },
  {
    "id": 10,
    "name": "Breeween",
    "categ": "Web App | Angular",
    "descr": "A project for practicing in Angular. Web audio player. User can add recordings to Firebase Database. Audio player has the ability to rewind, change volume and pause/resume. Audio player control logic is placed in a dedicated service.",
    "img": "./img/projects/breeween.png",
    "tags": [
      "ANGULAR",
      "FIREBASE",
      "TYPESCRIPT",
      "AUDIO PLAYER",
      "MATERIAL TABLE"
    ],
    "links": [
      {
        "icon": "github",
        "src": "https://github.com/Hartaithan/breeween"
      },
      {
        "icon": "link",
        "src": "https://breeween.vercel.app/"
      }
    ]
  }
]
